Id: 1
Execution stack: 
(v1 is Ref(int)|(v2 is Ref(int)|(v3 is Ref(int)|(cnt is int|(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))))))))))
Symbol table: 
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
v1 is Ref(int)
(v2 is Ref(int)|(v3 is Ref(int)|(cnt is int|(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))))))))))
Symbol table: 
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
v1 is Ref(int)
(v2 is Ref(int)|(v3 is Ref(int)|(cnt is int|(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))))))))))
Symbol table: 
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
(v2 is Ref(int)|(v3 is Ref(int)|(cnt is int|(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))))))))))
Symbol table: 
v1 -> (0, int)
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
(v2 is Ref(int)|(v3 is Ref(int)|(cnt is int|(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))))))))))
Symbol table: 
v1 -> (0, int)
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
v2 is Ref(int)
(v3 is Ref(int)|(cnt is int|(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))))))))
Symbol table: 
v1 -> (0, int)
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
v2 is Ref(int)
(v3 is Ref(int)|(cnt is int|(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))))))))
Symbol table: 
v1 -> (0, int)
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
(v3 is Ref(int)|(cnt is int|(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))))))))
Symbol table: 
v1 -> (0, int)
v2 -> (0, int)
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
(v3 is Ref(int)|(cnt is int|(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))))))))
Symbol table: 
v1 -> (0, int)
v2 -> (0, int)
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
v3 is Ref(int)
(cnt is int|(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))))))))
Symbol table: 
v1 -> (0, int)
v2 -> (0, int)
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
v3 is Ref(int)
(cnt is int|(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))))))))
Symbol table: 
v1 -> (0, int)
v2 -> (0, int)
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
(cnt is int|(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))))))))
Symbol table: 
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
(cnt is int|(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))))))))
Symbol table: 
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
cnt is int
(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))))))
Symbol table: 
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
cnt is int
(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))))))
Symbol table: 
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))))))
Symbol table: 
cnt -> int(0)
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
(New(v1, int(2))|(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))))))
Symbol table: 
cnt -> int(0)
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
New(v1, int(2))
(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))))))
Symbol table: 
cnt -> int(0)
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
New(v1, int(2))
(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))))))
Symbol table: 
cnt -> int(0)
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table:
Heap memory:
Latch table:
{}
Id: 1
Execution stack: 
(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))))))
Symbol table: 
cnt -> int(0)
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Latch table:
{}
Id: 1
Execution stack: 
(New(v2, int(3))|(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))))))
Symbol table: 
cnt -> int(0)
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Latch table:
{}
Id: 1
Execution stack: 
New(v2, int(3))
(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))))
Symbol table: 
cnt -> int(0)
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Latch table:
{}
Id: 1
Execution stack: 
New(v2, int(3))
(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))))
Symbol table: 
cnt -> int(0)
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Latch table:
{}
Id: 1
Execution stack: 
(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))))
Symbol table: 
cnt -> int(0)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
Latch table:
{}
Id: 1
Execution stack: 
(New(v3, int(4))|(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))))
Symbol table: 
cnt -> int(0)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
Latch table:
{}
Id: 1
Execution stack: 
New(v3, int(4))
(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))))
Symbol table: 
cnt -> int(0)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
Latch table:
{}
Id: 1
Execution stack: 
New(v3, int(4))
(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))))
Symbol table: 
cnt -> int(0)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
Latch table:
{}
Id: 1
Execution stack: 
(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))))
Symbol table: 
cnt -> int(0)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
3 -> int(4)
Latch table:
{}
Id: 1
Execution stack: 
(newLatch(cnt, v2)|(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))))
Symbol table: 
cnt -> int(0)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
3 -> int(4)
Latch table:
{}
Id: 1
Execution stack: 
newLatch(cnt, v2)
(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))
Symbol table: 
cnt -> int(0)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
3 -> int(4)
Latch table:
{}
Id: 1
Execution stack: 
newLatch(cnt, v2)
(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))
Symbol table: 
cnt -> int(0)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
3 -> int(4)
Latch table:
{}
Id: 1
Execution stack: 
(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 1
Execution stack: 
(Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))|(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 1
Execution stack: 
Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))
(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 1
Execution stack: 
Fork((WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))))
(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 1
Execution stack: 
(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 2
Execution stack: 
(WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt)))))))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 1
Execution stack: 
(await(cnt)|(print(int(100))|(countDown(cnt)|print(int(100)))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 2
Execution stack: 
(WriteHeap(v1, v1 * int(10))|(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt)))))))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 2
Execution stack: 
WriteHeap(v1, v1 * int(10))
(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 2
Execution stack: 
WriteHeap(v1, v1 * int(10))
(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 2
Execution stack: 
(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 2
Execution stack: 
(print(v1)|(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 2
Execution stack: 
print(v1)
(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt)))))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 2
Execution stack: 
print(v1)
(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt)))))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 2
Execution stack: 
(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt)))))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 2
Execution stack: 
(countDown(cnt)|Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt)))))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 2
Execution stack: 
countDown(cnt)
Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 2
Execution stack: 
countDown(cnt)
Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=3}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 2
Execution stack: 
print(int(2))
Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 2
Execution stack: 
print(int(2))
Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 2
Execution stack: 
Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 2
Execution stack: 
Fork((WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 2
Execution stack: 
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 3
Execution stack: 
(WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt)))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 3
Execution stack: 
(WriteHeap(v2, v2 * int(10))|(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt)))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 3
Execution stack: 
WriteHeap(v2, v2 * int(10))
(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 3
Execution stack: 
WriteHeap(v2, v2 * int(10))
(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(3)
3 -> int(4)
Latch table:
{1=2}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=2}
Id: 3
Execution stack: 
(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=2}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=2}
Id: 3
Execution stack: 
(print(v2)|(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=2}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=2}
Id: 3
Execution stack: 
print(v2)
(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt)))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=2}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=2}
Id: 3
Execution stack: 
print(v2)
(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt)))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=2}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=2}
Id: 3
Execution stack: 
(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt)))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=2}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=2}
Id: 3
Execution stack: 
(countDown(cnt)|Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt)))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=2}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=2}
Id: 3
Execution stack: 
countDown(cnt)
Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=2}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=2}
Id: 3
Execution stack: 
countDown(cnt)
Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=2}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 3
Execution stack: 
print(int(3))
Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 3
Execution stack: 
print(int(3))
Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 3
Execution stack: 
Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 3
Execution stack: 
Fork((WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 3
Execution stack: 
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 4
Execution stack: 
(WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 4
Execution stack: 
(WriteHeap(v3, v3 * int(10))|(print(v3)|countDown(cnt)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 4
Execution stack: 
WriteHeap(v3, v3 * int(10))
(print(v3)|countDown(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 4
Execution stack: 
WriteHeap(v3, v3 * int(10))
(print(v3)|countDown(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(4)
Latch table:
{1=1}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=1}
Id: 4
Execution stack: 
(print(v3)|countDown(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=1}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=1}
Id: 4
Execution stack: 
(print(v3)|countDown(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=1}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=1}
Id: 4
Execution stack: 
print(v3)
countDown(cnt)
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=1}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=1}
Id: 4
Execution stack: 
print(v3)
countDown(cnt)
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=1}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=1}
Id: 4
Execution stack: 
countDown(cnt)
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=1}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=1}
Id: 4
Execution stack: 
countDown(cnt)
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=1}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 4
Execution stack: 
print(int(4))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 1
Execution stack: 
await(cnt)
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 4
Execution stack: 
print(int(4))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 1
Execution stack: 
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
int(4)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 4
Execution stack: 
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
int(4)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 1
Execution stack: 
(print(int(100))|(countDown(cnt)|print(int(100))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
int(4)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 1
Execution stack: 
print(int(100))
(countDown(cnt)|print(int(100)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
int(4)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 1
Execution stack: 
print(int(100))
(countDown(cnt)|print(int(100)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
int(4)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 1
Execution stack: 
(countDown(cnt)|print(int(100)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
int(4)
int(100)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 1
Execution stack: 
(countDown(cnt)|print(int(100)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
int(4)
int(100)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 1
Execution stack: 
countDown(cnt)
print(int(100))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
int(4)
int(100)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 1
Execution stack: 
countDown(cnt)
print(int(100))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
int(4)
int(100)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 1
Execution stack: 
print(int(1))
print(int(100))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
int(4)
int(100)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 1
Execution stack: 
print(int(1))
print(int(100))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
int(4)
int(100)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 1
Execution stack: 
print(int(100))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
int(4)
int(100)
int(1)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 1
Execution stack: 
print(int(100))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
int(4)
int(100)
int(1)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
Id: 1
Execution stack: 
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
int(20)
int(2)
int(30)
int(3)
int(40)
int(4)
int(100)
int(1)
int(100)
File table:
Heap memory:
1 -> int(20)
2 -> int(30)
3 -> int(40)
Latch table:
{1=0}
