Id: 1
Execution stack: 
(v is int|(v=int(20)|(for(v=int(0); v<int(3); v=v + int(1)) {Fork((print(v)|v=v + int(1)))}|print(v * int(10)))))
Symbol table: 
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
v is int
(v=int(20)|(for(v=int(0); v<int(3); v=v + int(1)) {Fork((print(v)|v=v + int(1)))}|print(v * int(10))))
Symbol table: 
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
v is int
(v=int(20)|(for(v=int(0); v<int(3); v=v + int(1)) {Fork((print(v)|v=v + int(1)))}|print(v * int(10))))
Symbol table: 
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
(v=int(20)|(for(v=int(0); v<int(3); v=v + int(1)) {Fork((print(v)|v=v + int(1)))}|print(v * int(10))))
Symbol table: 
v -> int(0)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
(v=int(20)|(for(v=int(0); v<int(3); v=v + int(1)) {Fork((print(v)|v=v + int(1)))}|print(v * int(10))))
Symbol table: 
v -> int(0)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
v=int(20)
(for(v=int(0); v<int(3); v=v + int(1)) {Fork((print(v)|v=v + int(1)))}|print(v * int(10)))
Symbol table: 
v -> int(0)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
v=int(20)
(for(v=int(0); v<int(3); v=v + int(1)) {Fork((print(v)|v=v + int(1)))}|print(v * int(10)))
Symbol table: 
v -> int(0)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
(for(v=int(0); v<int(3); v=v + int(1)) {Fork((print(v)|v=v + int(1)))}|print(v * int(10)))
Symbol table: 
v -> int(20)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
(for(v=int(0); v<int(3); v=v + int(1)) {Fork((print(v)|v=v + int(1)))}|print(v * int(10)))
Symbol table: 
v -> int(20)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
for(v=int(0); v<int(3); v=v + int(1)) {Fork((print(v)|v=v + int(1)))}
print(v * int(10))
Symbol table: 
v -> int(20)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
for(v=int(0); v<int(3); v=v + int(1)) {Fork((print(v)|v=v + int(1)))}
print(v * int(10))
Symbol table: 
v -> int(20)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
(v=int(0)|while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))})
print(v * int(10))
Symbol table: 
v -> int(20)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
(v=int(0)|while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))})
print(v * int(10))
Symbol table: 
v -> int(20)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
v=int(0)
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(20)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
v=int(0)
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(20)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(0)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(0)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
(Fork((print(v)|v=v + int(1)))|v=v + int(1))
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(0)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
(Fork((print(v)|v=v + int(1)))|v=v + int(1))
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(0)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
Fork((print(v)|v=v + int(1)))
v=v + int(1)
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(0)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
Fork((print(v)|v=v + int(1)))
v=v + int(1)
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(0)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
v=v + int(1)
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(0)
Output list: 
File table:
Heap memory:

Id: 2
Execution stack: 
(print(v)|v=v + int(1))
Symbol table: 
v -> int(0)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
v=v + int(1)
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(0)
Output list: 
File table:
Heap memory:

Id: 2
Execution stack: 
(print(v)|v=v + int(1))
Symbol table: 
v -> int(0)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(1)
Output list: 
File table:
Heap memory:

Id: 2
Execution stack: 
print(v)
v=v + int(1)
Symbol table: 
v -> int(0)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(1)
Output list: 
File table:
Heap memory:

Id: 2
Execution stack: 
print(v)
v=v + int(1)
Symbol table: 
v -> int(0)
Output list: 
File table:
Heap memory:

Id: 1
Execution stack: 
(Fork((print(v)|v=v + int(1)))|v=v + int(1))
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(1)
Output list: 
int(0)
File table:
Heap memory:

Id: 2
Execution stack: 
v=v + int(1)
Symbol table: 
v -> int(0)
Output list: 
int(0)
File table:
Heap memory:

Id: 1
Execution stack: 
(Fork((print(v)|v=v + int(1)))|v=v + int(1))
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(1)
Output list: 
int(0)
File table:
Heap memory:

Id: 2
Execution stack: 
v=v + int(1)
Symbol table: 
v -> int(0)
Output list: 
int(0)
File table:
Heap memory:

Id: 1
Execution stack: 
Fork((print(v)|v=v + int(1)))
v=v + int(1)
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(1)
Output list: 
int(0)
File table:
Heap memory:

Id: 2
Execution stack: 
Symbol table: 
v -> int(1)
Output list: 
int(0)
File table:
Heap memory:

Id: 1
Execution stack: 
Fork((print(v)|v=v + int(1)))
v=v + int(1)
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(1)
Output list: 
int(0)
File table:
Heap memory:

Id: 1
Execution stack: 
v=v + int(1)
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(1)
Output list: 
int(0)
File table:
Heap memory:

Id: 3
Execution stack: 
(print(v)|v=v + int(1))
Symbol table: 
v -> int(1)
Output list: 
int(0)
File table:
Heap memory:

Id: 1
Execution stack: 
v=v + int(1)
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(1)
Output list: 
int(0)
File table:
Heap memory:

Id: 3
Execution stack: 
(print(v)|v=v + int(1))
Symbol table: 
v -> int(1)
Output list: 
int(0)
File table:
Heap memory:

Id: 1
Execution stack: 
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(2)
Output list: 
int(0)
File table:
Heap memory:

Id: 3
Execution stack: 
print(v)
v=v + int(1)
Symbol table: 
v -> int(1)
Output list: 
int(0)
File table:
Heap memory:

Id: 1
Execution stack: 
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(2)
Output list: 
int(0)
File table:
Heap memory:

Id: 3
Execution stack: 
print(v)
v=v + int(1)
Symbol table: 
v -> int(1)
Output list: 
int(0)
File table:
Heap memory:

Id: 1
Execution stack: 
(Fork((print(v)|v=v + int(1)))|v=v + int(1))
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(2)
Output list: 
int(0)
int(1)
File table:
Heap memory:

Id: 3
Execution stack: 
v=v + int(1)
Symbol table: 
v -> int(1)
Output list: 
int(0)
int(1)
File table:
Heap memory:

Id: 1
Execution stack: 
(Fork((print(v)|v=v + int(1)))|v=v + int(1))
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(2)
Output list: 
int(0)
int(1)
File table:
Heap memory:

Id: 3
Execution stack: 
v=v + int(1)
Symbol table: 
v -> int(1)
Output list: 
int(0)
int(1)
File table:
Heap memory:

Id: 1
Execution stack: 
Fork((print(v)|v=v + int(1)))
v=v + int(1)
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(2)
Output list: 
int(0)
int(1)
File table:
Heap memory:

Id: 3
Execution stack: 
Symbol table: 
v -> int(2)
Output list: 
int(0)
int(1)
File table:
Heap memory:

Id: 1
Execution stack: 
Fork((print(v)|v=v + int(1)))
v=v + int(1)
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(2)
Output list: 
int(0)
int(1)
File table:
Heap memory:

Id: 1
Execution stack: 
v=v + int(1)
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(2)
Output list: 
int(0)
int(1)
File table:
Heap memory:

Id: 4
Execution stack: 
(print(v)|v=v + int(1))
Symbol table: 
v -> int(2)
Output list: 
int(0)
int(1)
File table:
Heap memory:

Id: 1
Execution stack: 
v=v + int(1)
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(2)
Output list: 
int(0)
int(1)
File table:
Heap memory:

Id: 4
Execution stack: 
(print(v)|v=v + int(1))
Symbol table: 
v -> int(2)
Output list: 
int(0)
int(1)
File table:
Heap memory:

Id: 1
Execution stack: 
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(3)
Output list: 
int(0)
int(1)
File table:
Heap memory:

Id: 4
Execution stack: 
print(v)
v=v + int(1)
Symbol table: 
v -> int(2)
Output list: 
int(0)
int(1)
File table:
Heap memory:

Id: 1
Execution stack: 
while(v < int(3)){(Fork((print(v)|v=v + int(1)))|v=v + int(1))}
print(v * int(10))
Symbol table: 
v -> int(3)
Output list: 
int(0)
int(1)
File table:
Heap memory:

Id: 4
Execution stack: 
print(v)
v=v + int(1)
Symbol table: 
v -> int(2)
Output list: 
int(0)
int(1)
File table:
Heap memory:

Id: 1
Execution stack: 
print(v * int(10))
Symbol table: 
v -> int(3)
Output list: 
int(0)
int(1)
int(2)
File table:
Heap memory:

Id: 4
Execution stack: 
v=v + int(1)
Symbol table: 
v -> int(2)
Output list: 
int(0)
int(1)
int(2)
File table:
Heap memory:

Id: 1
Execution stack: 
print(v * int(10))
Symbol table: 
v -> int(3)
Output list: 
int(0)
int(1)
int(2)
File table:
Heap memory:

Id: 4
Execution stack: 
v=v + int(1)
Symbol table: 
v -> int(2)
Output list: 
int(0)
int(1)
int(2)
File table:
Heap memory:

Id: 1
Execution stack: 
Symbol table: 
v -> int(3)
Output list: 
int(0)
int(1)
int(2)
int(30)
File table:
Heap memory:

Id: 4
Execution stack: 
Symbol table: 
v -> int(3)
Output list: 
int(0)
int(1)
int(2)
int(30)
File table:
Heap memory:

