Id: 1
Execution stack: 
(v1 is Ref(int)|(cnt is int|(New(v1, int(2))|(newSemaphore(cnt, v1, int(1))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt)))))))))
Symbol table: 
Output list: 
File table:
Heap memory:
Toy Semaphore table:

Id: 1
Execution stack: 
v1 is Ref(int)
(cnt is int|(New(v1, int(2))|(newSemaphore(cnt, v1, int(1))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt))))))))
Symbol table: 
Output list: 
File table:
Heap memory:
Toy Semaphore table:

Id: 1
Execution stack: 
v1 is Ref(int)
(cnt is int|(New(v1, int(2))|(newSemaphore(cnt, v1, int(1))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt))))))))
Symbol table: 
Output list: 
File table:
Heap memory:
Toy Semaphore table:

Id: 1
Execution stack: 
(cnt is int|(New(v1, int(2))|(newSemaphore(cnt, v1, int(1))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt))))))))
Symbol table: 
v1 -> (0, int)
Output list: 
File table:
Heap memory:
Toy Semaphore table:

Id: 1
Execution stack: 
(cnt is int|(New(v1, int(2))|(newSemaphore(cnt, v1, int(1))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt))))))))
Symbol table: 
v1 -> (0, int)
Output list: 
File table:
Heap memory:
Toy Semaphore table:

Id: 1
Execution stack: 
cnt is int
(New(v1, int(2))|(newSemaphore(cnt, v1, int(1))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt)))))))
Symbol table: 
v1 -> (0, int)
Output list: 
File table:
Heap memory:
Toy Semaphore table:

Id: 1
Execution stack: 
cnt is int
(New(v1, int(2))|(newSemaphore(cnt, v1, int(1))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt)))))))
Symbol table: 
v1 -> (0, int)
Output list: 
File table:
Heap memory:
Toy Semaphore table:

Id: 1
Execution stack: 
(New(v1, int(2))|(newSemaphore(cnt, v1, int(1))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt)))))))
Symbol table: 
cnt -> int(0)
v1 -> (0, int)
Output list: 
File table:
Heap memory:
Toy Semaphore table:

Id: 1
Execution stack: 
(New(v1, int(2))|(newSemaphore(cnt, v1, int(1))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt)))))))
Symbol table: 
cnt -> int(0)
v1 -> (0, int)
Output list: 
File table:
Heap memory:
Toy Semaphore table:

Id: 1
Execution stack: 
New(v1, int(2))
(newSemaphore(cnt, v1, int(1))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt))))))
Symbol table: 
cnt -> int(0)
v1 -> (0, int)
Output list: 
File table:
Heap memory:
Toy Semaphore table:

Id: 1
Execution stack: 
New(v1, int(2))
(newSemaphore(cnt, v1, int(1))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt))))))
Symbol table: 
cnt -> int(0)
v1 -> (0, int)
Output list: 
File table:
Heap memory:
Toy Semaphore table:

Id: 1
Execution stack: 
(newSemaphore(cnt, v1, int(1))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt))))))
Symbol table: 
cnt -> int(0)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:

Id: 1
Execution stack: 
(newSemaphore(cnt, v1, int(1))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt))))))
Symbol table: 
cnt -> int(0)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:

Id: 1
Execution stack: 
newSemaphore(cnt, v1, int(1))
(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt)))))
Symbol table: 
cnt -> int(0)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:

Id: 1
Execution stack: 
newSemaphore(cnt, v1, int(1))
(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt)))))
Symbol table: 
cnt -> int(0)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:

Id: 1
Execution stack: 
(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt)))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 1
Execution stack: 
(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))|(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt)))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 1
Execution stack: 
Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))
(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 1
Execution stack: 
Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))))
(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 1
Execution stack: 
(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 2
Execution stack: 
(acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 1
Execution stack: 
(Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))|(acquire(cnt)|(print(v1 - int(1))|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 2
Execution stack: 
(acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 1
Execution stack: 
Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))
(acquire(cnt)|(print(v1 - int(1))|release(cnt)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 2
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 1
Execution stack: 
Fork((acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))))
(acquire(cnt)|(print(v1 - int(1))|release(cnt)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 2
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 1
Execution stack: 
(acquire(cnt)|(print(v1 - int(1))|release(cnt)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 2
Execution stack: 
(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 3
Execution stack: 
(acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt)))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 1
Execution stack: 
(acquire(cnt)|(print(v1 - int(1))|release(cnt)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 2
Execution stack: 
(WriteHeap(v1, v1 * int(10))|(print(v1)|release(cnt)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 3
Execution stack: 
(acquire(cnt)|(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt)))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 1
Execution stack: 
acquire(cnt)
(print(v1 - int(1))|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 2
Execution stack: 
WriteHeap(v1, v1 * int(10))
(print(v1)|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 3
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 1
Execution stack: 
acquire(cnt)
(print(v1 - int(1))|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 2
Execution stack: 
WriteHeap(v1, v1 * int(10))
(print(v1)|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 3
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(2)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 1
Execution stack: 
acquire(cnt)
(print(v1 - int(1))|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 2
Execution stack: 
(print(v1)|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 3
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 1
Execution stack: 
acquire(cnt)
(print(v1 - int(1))|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 2
Execution stack: 
(print(v1)|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 3
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 1
Execution stack: 
acquire(cnt)
(print(v1 - int(1))|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 2
Execution stack: 
print(v1)
release(cnt)
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 3
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 1
Execution stack: 
acquire(cnt)
(print(v1 - int(1))|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 2
Execution stack: 
print(v1)
release(cnt)
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 3
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 1
Execution stack: 
acquire(cnt)
(print(v1 - int(1))|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 2
Execution stack: 
release(cnt)
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 3
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 1
Execution stack: 
acquire(cnt)
(print(v1 - int(1))|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 2
Execution stack: 
release(cnt)
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 3
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [2], 1)

Id: 1
Execution stack: 
acquire(cnt)
(print(v1 - int(1))|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 2
Execution stack: 
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 3
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 1
Execution stack: 
acquire(cnt)
(print(v1 - int(1))|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 3
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [], 1)

Id: 1
Execution stack: 
(print(v1 - int(1))|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [1], 1)

Id: 3
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [1], 1)

Id: 1
Execution stack: 
(print(v1 - int(1))|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [1], 1)

Id: 3
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [1], 1)

Id: 1
Execution stack: 
print(v1 - int(1))
release(cnt)
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [1], 1)

Id: 3
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [1], 1)

Id: 1
Execution stack: 
print(v1 - int(1))
release(cnt)
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [1], 1)

Id: 3
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [1], 1)

Id: 1
Execution stack: 
release(cnt)
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [1], 1)

Id: 3
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [1], 1)

Id: 1
Execution stack: 
release(cnt)
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [1], 1)

Id: 3
Execution stack: 
acquire(cnt)
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [1], 1)

Id: 1
Execution stack: 
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [3], 1)

Id: 3
Execution stack: 
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [3], 1)

Id: 3
Execution stack: 
(WriteHeap(v1, v1 * int(10))|(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt))))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [3], 1)

Id: 3
Execution stack: 
WriteHeap(v1, v1 * int(10))
(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [3], 1)

Id: 3
Execution stack: 
WriteHeap(v1, v1 * int(10))
(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(20)
Toy Semaphore table:
1 -> (2, [3], 1)

Id: 3
Execution stack: 
(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(200)
Toy Semaphore table:
1 -> (2, [3], 1)

Id: 3
Execution stack: 
(WriteHeap(v1, v1 * int(2))|(print(v1)|release(cnt)))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(200)
Toy Semaphore table:
1 -> (2, [3], 1)

Id: 3
Execution stack: 
WriteHeap(v1, v1 * int(2))
(print(v1)|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(200)
Toy Semaphore table:
1 -> (2, [3], 1)

Id: 3
Execution stack: 
WriteHeap(v1, v1 * int(2))
(print(v1)|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(200)
Toy Semaphore table:
1 -> (2, [3], 1)

Id: 3
Execution stack: 
(print(v1)|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(400)
Toy Semaphore table:
1 -> (2, [3], 1)

Id: 3
Execution stack: 
(print(v1)|release(cnt))
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(400)
Toy Semaphore table:
1 -> (2, [3], 1)

Id: 3
Execution stack: 
print(v1)
release(cnt)
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(400)
Toy Semaphore table:
1 -> (2, [3], 1)

Id: 3
Execution stack: 
print(v1)
release(cnt)
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
File table:
Heap memory:
1 -> int(400)
Toy Semaphore table:
1 -> (2, [3], 1)

Id: 3
Execution stack: 
release(cnt)
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
int(400)
File table:
Heap memory:
1 -> int(400)
Toy Semaphore table:
1 -> (2, [3], 1)

Id: 3
Execution stack: 
release(cnt)
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
int(400)
File table:
Heap memory:
1 -> int(400)
Toy Semaphore table:
1 -> (2, [3], 1)

Id: 3
Execution stack: 
Symbol table: 
cnt -> int(1)
v1 -> (1, int)
Output list: 
int(20)
int(19)
int(400)
File table:
Heap memory:
1 -> int(400)
Toy Semaphore table:
1 -> (2, [], 1)

