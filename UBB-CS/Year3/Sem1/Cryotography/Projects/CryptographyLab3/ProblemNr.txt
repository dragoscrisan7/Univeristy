1
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

// Function to perform modular exponentiation a^b % m
long long modExp(long long a, long long b, long long m) {
    long long result = 1;
    a = a % m;

    while (b > 0) {
        if (b % 2 == 1) {
            result = (result * a) % m;
        }
        a = (a * a) % m;
        b /= 2;
    }

    return result;
}

// Miller-Rabin primality test
bool millerRabinTest(long long n, int k) {
    if (n <= 1 || n == 4) {
        return false;
    }
    if (n <= 3) {
        return true;
    }

    // Find d such that n-1 = 2^r * d
    long long d = n - 1;
    while (d % 2 == 0) {
        d /= 2;
    }

    // Repeat the test k times
    for (int i = 0; i < k; ++i) {
        // Randomly choose a witness 'a' in the range [2, n-2]
        long long a = 2 + rand() % (n - 3);

        // Compute a^d % n
        long long x = modExp(a, d, n);

        // If x is 1 or n-1, then 'a' is probably a witness
        if (x == 1 || x == n - 1) {
            continue;
        }

        // Repeat the squaring process
        for (int r = 1; r < (int)log2(n - 1); ++r) {
            x = modExp(x, 2, n);
            if (x == n - 1) {
                break;
            }
        }

        // If we didn't find a non-trivial square root of 1, then 'a' is a witness
        if (x != n - 1) {
            return false;
        }
    }

    // If the test passed for all witnesses, n is probably prime
    return true;
}

int main() {
    srand(time(NULL));

    long long number;
    int iterations;

    // Input the number to test for primality
    cout << "Enter a number to test for primality: ";
    cin >> number;

    // Input the number of iterations for the Miller-Rabin test
    cout << "Enter the number of iterations: ";
    cin >> iterations;

    // Perform the Miller-Rabin primality test
    if (millerRabinTest(number, iterations)) {
        cout << number << " is probably prime." << endl;
    } else {
        cout << number << " is composite." << endl;
    }

    return 0;
}
/*
 * 17-5
 * 15-5
 * 104729-10
 * 104731-10
 */